#version 460
#extension GL_EXT_ray_tracing : enable

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;
layout(binding = 2, set = 0) uniform CameraProperties
{
	mat4 viewInverse;
	mat4 projInverse;
} cam;

layout(binding = 0, set = 1) uniform sampler2D GBuffer[5];

struct UniformDirectionalLight {
	vec3 Color;
	int padding;
	vec3 Direction;
	int padding1;
};

struct UniformPointLight {
	vec3 Color;
	int padding;
	vec3 Position;
	int padding1;
};

layout (set=2, binding=0) uniform Scene
{
	mat4 view;
	mat4 projection;
	vec3 camPosition;
	int padding;
	int numDirectionalLights;
	int numPointLights;
};

layout (std140, set=2, binding=2) readonly buffer DirectionalLightBuffer {
	UniformDirectionalLight lights[];
} directionalLightBuffer;

layout (std140, set=2, binding=3) readonly buffer PointLightBuffer {
	UniformPointLight lights[];
} pointLightBuffer;

layout(location = 0) rayPayloadEXT bool hitValue;

const float PI = 3.1415926535897932384626433832795;
const float MIN_FLT = 1.175494351e-32;

float D(float NH, float alpha)
{
	float alphaSq = alpha*alpha;
	float d = NH*NH * (alphaSq - 1.) + 1.;
	return alphaSq / (PI * d*d);
}

float G1(float X, float k)
{
	return X / (X * (1. - k) + k);
}

float GGX(float NL, float NV, float Roughness)
{
	float k = (Roughness + 1.);
	k = k*k / 8.;
	return G1(NL, k) * G1(NV, k);
}

vec3 FUnreal(float VH, vec3 F0)
{
	return F0 + (1. - F0) * pow(2, (-5.55473 * VH - 6.98316) * VH);
}

void main()
{
	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
	vec2 d = inUV * 2.0 - 1.0;

	vec4 origin = cam.viewInverse * vec4(0,0,0,1);
	vec4 target = cam.projInverse * vec4(d.x, -d.y, 1, 1) ;
	vec4 direction = cam.viewInverse*vec4(normalize(target.xyz), 0) ;

	vec4 Nw = texture(GBuffer[1], inUV);
	vec4 BaseColor = texture(GBuffer[2], inUV);
	vec4 Emissive = texture(GBuffer[4], inUV);

	vec3 color = vec3(0.);

	if (Nw.w == 1.)
	{
		color = BaseColor.xyz;
	}
	else
	{
		vec3 FragPos = texture(GBuffer[0], inUV).xyz;

		vec3 N = normalize(Nw.xyz);
		vec3 V = normalize(camPosition - FragPos);

		float opacity = BaseColor.a;
		vec3 albedo = BaseColor.rgb;

		vec3 MetallicRoughnessAO = texture(GBuffer[3], inUV).rgb;

		float AO = MetallicRoughnessAO.b;

		float Metallic = MetallicRoughnessAO.g;
		vec3 F0 = mix(vec3(0.04), albedo, Metallic);

		float Roughness = MetallicRoughnessAO.r;
		float alpha = Roughness*Roughness;

		vec3 C_Diff = albedo * (1. - Metallic);
		vec3 fDiff = (1. / PI) * C_Diff;

		float NV = max(0., dot(N, V));

		for(int i = 0; i < numDirectionalLights; i++)
		{
			UniformDirectionalLight directionalLight = directionalLightBuffer.lights[i];

			vec3 L = normalize(-directionalLight.Direction);
			float NL = max(0., dot(N, L));
			
			if (NL > 0.)
			{
				float tmin = 1e-3;
				float tmax = 10000.0;
				
				hitValue = false;

				traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, FragPos, tmin, L, tmax, 0);

				if (!hitValue)
				{
					vec3 H = normalize(V + L);

					float NH = max(0., dot(N, H));
					float VH = max(0., dot(V, H));

					vec3 F = FUnreal(VH, F0);

					vec3 fSpec = vec3(D(NH, alpha) * GGX(NL, NV, Roughness) / (4. * NL * NV + MIN_FLT));
					vec3 BRDF = mix(fDiff, fSpec, F);

					color += BRDF * directionalLight.Color * NL;
				}
			}
		}

		for(int i = 0; i < numPointLights; i++)
		{
			UniformPointLight pointLight = pointLightBuffer.lights[i];

			vec3 L = normalize(pointLight.Position - FragPos);
			float NL = max(0., dot(N, L));

			if (NL > 0.)
			{
				float tmin = 1e-3;
				float tmax = length(pointLight.Position - FragPos);

				hitValue = false;

				traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, FragPos, tmin, L, tmax, 0);

				if (!hitValue)
				{
					vec3 H = normalize(V + L);

					float NH = max(0., dot(N, H));
					float VH = max(0., dot(V, H));

					vec3 F = FUnreal(VH, F0);

					vec3 fSpec = vec3(D(NH, alpha) * GGX(NL, NV, Roughness) / (4. * NL * NV + MIN_FLT));
					vec3 BRDF = mix(fDiff, fSpec, F);

					color += BRDF * pointLight.Color * NL;
				}
			}
		}

		vec3 ambiant = vec3(0.004) * albedo * AO;

		color += ambiant + Emissive.rgb;

		color = color / (color + 1.);
	}

	color.x = (color.x <= 0.0031308) ? 12.92 * color.x : 1.055 * pow(color.x, 1 / 2.4) - 0.055;
	color.y = (color.y <= 0.0031308) ? 12.92 * color.y : 1.055 * pow(color.y, 1 / 2.4) - 0.055;
	color.z = (color.z <= 0.0031308) ? 12.92 * color.z : 1.055 * pow(color.z, 1 / 2.4) - 0.055;
	
	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 1.));
}